#if ((${PACKAGE_NAME} && ${PACKAGE_NAME} != ""))package ${PACKAGE_NAME} #end
import akka.actor.{Actor, ActorLogging, ActorRef, Props}
import akka.pattern.ask
import ${PACKAGE_NAME}.${NAME}.Protocol.{DefaultIncomingMessage, DefaultOutgoingMessage}
import ${PACKAGE_NAME}.${NAME}.Settings
import scala.concurrent.Future
import scala.language.postfixOps

#parse("File Header.java")
class ${NAME}(settings: Settings) extends Actor with ActorLogging {

  override def receive: Actor.Receive = {
    case _: DefaultIncomingMessage =>
  }


}


object ${NAME} {
  /**
    * creates props for actor
    */
  def props(settings: Settings): Props = {
    Props(new ${NAME}(settings))
  }

  final case class Settings()

  object Protocol {
    /**
      * Wraps actor ref factory with protocol interface
      */
    def apply(actorRef: => ActorRef): Protocol = new Protocol(actorRef)

    sealed trait IncomingMessage

    case class DefaultIncomingMessage() extends IncomingMessage

    //outgoing

    sealed trait OutgoingMessage

    case class DefaultOutgoingMessage() extends OutgoingMessage

  }

  /**
    * An protocol for [[${NAME}]]
    */
  final class Protocol private(actorRef: => ActorRef) {

    import concurrent.duration._

    def defaultMessage(msg: DefaultIncomingMessage): Unit = actorRef ! msg

    def defaultMessageAsk(msg: DefaultIncomingMessage): Future[DefaultOutgoingMessage] =

      actorRef.ask(msg)(5 seconds).mapTo
  }


}