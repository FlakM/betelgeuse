#if ((${PACKAGE_NAME} && ${PACKAGE_NAME} != ""))package ${PACKAGE_NAME} #end

import akka.actor.{Actor, ActorLogging, ActorRef, Props}
import akka.pattern.ask
import akka.persistence.RecoveryCompleted
import akka.cluster.sharding.ShardRegion
import ${PACKAGE_NAME}.${NAME}.Protocol.{DefaultIncomingMessage, DefaultOutgoingMessage}
import ${PACKAGE_NAME}.${NAME}.Settings
import org.s4s0l.betelgeuse.akkacommons.persistence.utils.PersistentShardedActor
import org.s4s0l.betelgeuse.akkacommons.utils.TimeoutShardedActor
import org.s4s0l.betelgeuse.akkacommons.clustering.sharding.BetelgeuseAkkaClusteringShardingExtension



import scala.concurrent.Future
import scala.language.postfixOps

#parse("File Header.java")
class ${NAME}(settings: Settings) extends Actor
  with ActorLogging
  with PersistentShardedActor
  with TimeoutShardedActor {

  import ${PACKAGE_NAME}.${NAME}.Events._

  override def receiveRecover: Receive = {
    case e: CqrsEvent if processEvent(true).isDefinedAt(e) => processEvent(true)
    case _: RecoveryCompleted =>
    case e => throw new Exception(s"unable to recover, unknown or unsupported event #[[$e]]#")
  }

  private def processEvent(recover: Boolean): PartialFunction[CqrsEvent, Unit] = {
    case _: DefaultEvent =>
  }

  override def receiveCommand: Receive = {
    case _: DefaultIncomingMessage =>
      persist(DefaultEvent())(processEvent(false))
  }


}


object ${NAME} {
  final case class Settings(name:String)

  def startSharded(settings: Settings, propsMapper: Props => Props = identity)(implicit shardingExt: BetelgeuseAkkaClusteringShardingExtension): Protocol = {
    val ref = shardingExt.start(
        settings.name,
        propsMapper(Props(new ${NAME}(settings))),
        entityExtractor)
    Protocol(ref)
  }

  private def entityExtractor: ShardRegion.ExtractEntityId = {
    case a: DefaultIncomingMessage => ("1", a)
  }

  object Protocol {
    /**
      * Wraps actor ref factory with protocol interface
      */
    def apply(actorRef: => ActorRef): Protocol = new Protocol(actorRef)

    sealed trait IncomingMessage

    case class DefaultIncomingMessage() extends IncomingMessage

    //outgoing

    sealed trait OutgoingMessage

    case class DefaultOutgoingMessage() extends OutgoingMessage

  }

  /**
    * An protocol for [[${NAME}]]
    */
  final class Protocol private(actorRef: => ActorRef) {

    import concurrent.duration._

    def defaultMessage(msg: DefaultIncomingMessage)
        (implicit sender: ActorRef = Actor.noSender): Unit =
            actorRef ! msg

    def defaultMessageAsk(msg: DefaultIncomingMessage)
        (implicit sender: ActorRef = Actor.noSender)
        : Future[DefaultOutgoingMessage] =
          actorRef.ask(msg)(5 seconds).mapTo[DefaultOutgoingMessage]
  }

  private object Events {

    sealed trait CqrsEvent

    case class DefaultEvent() extends CqrsEvent

  }


}